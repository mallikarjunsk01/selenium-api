# scripts/ai_updater.py
import os
import google.generativeai as genai
from github import Github, GithubException
def main():
   """
   Main function to orchestrate the AI-powered code update process.
   """
   # --- 1. Get required variables from GitHub Actions environment ---
   try:
       github_token = os.environ["GITHUB_TOKEN"]
       repo_name = os.environ["GITHUB_REPOSITORY"]
       issue_number = int(os.environ["ISSUE_NUMBER"])
       gemini_api_key = os.environ["GEMINI_API_KEY"]
   except KeyError as e:
       print(f"Error: Missing environment variable {e}. Make sure you have set up secrets correctly.")
       return
   # --- 2. Configure APIs ---
   # Authenticate with GitHub
   g = Github(github_token)
   repo = g.get_repo(repo_name)
   # Configure Gemini AI
   genai.configure(api_key=gemini_api_key)
   model = genai.GenerativeModel('gemini-2.5-flash') # Using a fast and capable model
   # --- 3. Get Issue Details ---
   issue = repo.get_issue(number=issue_number)
   issue_title = issue.title
   issue_body = issue.body
   # We need to parse the file to be updated from the issue body
   # Let's assume the user specifies it like: "File: path/to/your/script.py"
   try:
       file_to_update = [line.split("File:")[1].strip() for line in issue_body.split('\n') if 'File:' in line][0]
   except IndexError:
       print("Error: Could not find 'File: <path>' in the issue body.")
       issue.create_comment("AI Agent: I couldn't find the `File: <path>` in your issue description. Please specify the file to update.")
       return
   # --- 4. Get the content of the file to be updated ---
   try:
       file_content_obj = repo.get_contents(file_to_update)
       original_file_content = file_content_obj.decoded_content.decode("utf-8")
   except GithubException:
       print(f"Error: Could not find the file '{file_to_update}' in the repository.")
       issue.create_comment(f"AI Agent: I couldn't find the file `{file_to_update}` in the repository. Please check the path.")
       return
   # --- 5. Build the Prompt for the AI ---
   prompt = f"""
   You are an expert software developer specializing in automation scripts. Your task is to update a Python script based on a user's request.
   **User's Request:**
   {issue_title}
   {issue_body}
   **Original Python Script (`{file_to_update}`):**
   ```python
   {original_file_content}
   ```
   **Your Instructions:**
   1. Carefully read the user's request and the original script.
   2. Modify the script to implement the requested changes.
   3. IMPORTANT: Your response must ONLY contain the full, updated Python code for the script. Do not include any explanations, greetings, or markdown formatting like ```python. Just the raw code.
   """
   # --- 6. Call the Gemini AI API ---
   print("Calling Gemini API...")
   try:
       response = model.generate_content(prompt)
       updated_code = response.text.strip()
       # A simple check to ensure the AI didn't return an empty response
       if not updated_code or "Traceback" in updated_code:
           raise Exception("AI returned an empty or error response.")
   except Exception as e:
       print(f"Error calling Gemini API: {e}")
       issue.create_comment(f"AI Agent: I encountered an error with the AI model. It said: `{e}`. Please try again or rephrase your request.")
       return
   # --- 7. Create a new branch and commit the changes ---
   new_branch_name = f"ai-update-issue-{issue_number}"
   source_branch = repo.get_branch(repo.default_branch)
   # Create new branch from default branch
   try:
       repo.create_git_ref(ref=f"refs/heads/{new_branch_name}", sha=source_branch.commit.sha)
   except GithubException as e:
       if e.status == 422: # Branch already exists
           print(f"Branch {new_branch_name} already exists. Skipping branch creation.")
       else:
           raise e
   # Commit the updated file to the new branch
   commit_message = f"feat: AI updates script based on issue #{issue_number}"
   repo.update_file(
       path=file_to_update,
       message=commit_message,
       content=updated_code,
       sha=file_content_obj.sha,
       branch=new_branch_name
   )
   print(f"Changes committed to branch {new_branch_name}.")
   # --- 8. Create a Pull Request ---
   pr_title = f"AI Update for Issue #{issue_number}: {issue_title}"
   pr_body = f"""
   This PR was automatically generated by an AI agent in response to issue #{issue_number}.
   **Request:**
> {issue_body}
   Please review the changes before merging.
   """
   try:
       pr = repo.create_pull(
           title=pr_title,
           body=pr_body,
           head=new_branch_name,
           base=repo.default_branch
       )
       print(f"Pull Request created: {pr.html_url}")
       issue.create_comment(f"AI Agent: I have created a Pull Request with the requested changes. You can review it here: {pr.html_url}")
   except GithubException as e:
        print(f"Could not create PR. It might already exist. Error: {e}")
        issue.create_comment(f"AI Agent: I've pushed the changes to the `{new_branch_name}` branch, but I couldn't create a Pull Request. It might already exist.")

if __name__ == "__main__":
   main()
